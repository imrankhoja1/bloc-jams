{"version":3,"sources":["app/scripts/album.js","app/scripts/app.js","app/scripts/collection.js","app/scripts/landing.js","app/scripts/profile.js"],"names":[],"mappingsphPA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjEA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA","file":"public/javascripts/app.js","sourcesContent":["var albumPicasso = {\n  name: 'The Colors',\n  artist: 'Pablo Picasso',\n  label: 'Cubism',\n  year: '1881',\n  albumArtUrl: '/images/album-placeholder.png',\n  songs: [\n      { name: 'Blue', length: '4:26' },\n      { name: 'Green', length: '3:14' },\n      { name: 'Red', length: '5:01' },\n      { name: 'Pink', length: '3:21' },\n      { name: 'Magenta', length: '2:15' }\n    ]\n};\n\n var albumMarconi = {\n   name: 'The Telephone',\n   artist: 'Guglielmo Marconi',\n   label: 'EM',\n   year: '1909',\n   albumArtUrl: '/images/album-placeholder.png',\n   songs: [\n       { name: 'Hello, Operator?', length: '1:01' },\n       { name: 'Ring, ring, ring', length: '5:01' },\n       { name: 'Fits in your pocket', length: '3:21'},\n       { name: 'Can you hear me now?', length: '3:14' },\n       { name: 'Wrong phone number', length: '2:15'}\n     ]\n  };\n\n  var currentlyPlayingSong = null;\n\n var createSongRow = function(songNumber, songName, songLength) {\n   var template =\n       '<tr>'\n       // this row is basically storing the song number as a html data attribute that JS can read from later.\n       // the attribute is called song-number (basically whatever is after the 'data-')\n     + '  <td class=\"song-number col-md-1\" data-song-number=\"' + songNumber + '\">' + songNumber + '</td>'\n     + '  <td class=\"col-md-9\">' + songName + '</td>'\n     + '  <td class=\"col-md-2\">' + songLength + '</td>'\n     + '</tr>'\n     ;\n  \n  // instead of returning the row immediately, we'll attach hover functionality first\n  var $row = $(template);\n\n  var onHover = function(event) {\n    var songNumberCell = $(this).find('.song-number');\n    // get the song-number data from the div html\n    var songNumber = songNumberCell.data('song-number');\n    \n    // create the conditional to show play button if the user is hovering on a song that isn't the one playing\n    if (currentlyPlayingSong !== songNumber) {\n    // this line sets the play button on hover\n    songNumberCell.html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>');\n    }\n  };\n\n  var offHover = function(event) {\n    var songNumberCell = $(this).find('.song-number');\n    var songNumber = songNumberCell.data('song-number');\n\n    if (songNumber !== currentlyPlayingSong) {\n    songNumberCell.html(songNumber);\n    }\n  };\n\n  // toggle the play, pause and song number based on the button clicked\n  var clickHandler = function(event) {\n    var songNumber = $(this).data('song-number')\n\n    // if a song is playing and is clicked, handle what happens with the UI but don't do anything else\n    if (currentlyPlayingSong !== null) {\n      // stop playing the current song.\n      // replace stopped song button with number\n      // set the data attribute on .song-number div to that of the one that just got clicked\n      currentlyPlayingCell = $('.song-number[data-song-number=\"' + currentlyPlayingSong + '\"]');\n      currentlyPlayingCell.html(currentlyPlayingSong);\n    }\n\n    // a non playing song was clicked\n    if (currentlyPlayingSong !== songNumber) {\n      // a play icon wil be showing because of hover\n      // Switch from Play -> Pause to indicate new song is playing\n      $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-pause\"></i></a>');\n\n      // Set the current song to the one clicked\n      currentlyPlayingSong = songNumber;\n\n    } else if ( currentlyPlayingSong === songNumber ) {\n      // switch from Pause -> Play to indicate that song was paused\n      $(this).html('<a class=\"album-song-button\"><i class=\"fa fa-play\"></i></a>');\n\n      // set the current song to null\n      currentlyPlayingSong = null;\n    }\n  };\n\n  $row.find('.song-number').click(clickHandler);\n  $row.hover(onHover, offHover);\n  return $row;\n\n };\n \nvar changeAlbumView = function(album) {\n    \n    // Update the album title\n    var $albumTitle = $('.album-title');\n    $albumTitle.text(album.name);\n\n    // Update the album artist\n    var $albumArtist = $('.album-artist');\n    $albumArtist.text(album.artist);\n\n    // Update the meta-information\n    var $albumMeta = $('.album-meta-info');\n    $albumMeta.text(album.year + \" on \" + album.label);\n\n    // Update the album image\n    var $albumImage = $('.album-image img');\n    $albumImage.attr('src', album.albumArtUrl);\n\n    // Update the song list\n   var $songList = $(\".album-song-listing\");\n   $songList.empty();\n   var songs = album.songs;\n   for (var i = 0; i < songs.length; i++) {\n     var songData = songs[i];\n     var $newRow = createSongRow(i + 1, songData.name, songData.length);\n     $songList.append($newRow);\n   }\n};\n\nif (document.URL.match(/\\/album.html/)) {\n  $(document).ready(function () {\n    changeAlbumView(albumPicasso);\n    changeAlbumView(albumMarconi);\n    setupSeekBars();\n  });\n}\n\nvar updateSeekPercentage = function($seekBar, event) {\n  var barWidth = $seekBar.width();\n  var offsetX = event.pageX - $seekBar.offset().left; // get mouse offset here\n\n  var offsetXPercent = (offsetX / barWidth ) * 100;\n  offsetXPercent = Math.max(0, offsetXPercent);\n  offsetXPercent = Math.min(110, offsetXPercent);\n\n  var percentageString = offsetXPercent + '%';\n  $seekBar.find('.fill').width(percentageString);\n  $seekBar.find('.thumb').css({left: percentageString});\n}\n\nvar setupSeekBars = function () {\n  $seekBars = $('.player-bar .seek-bar');\n  $seekBars.click(function(event) {\n    updateSeekPercentage($(this), event);\n  });\n\n  $seekBars.find('.thumb').mousedown(function(event){\n    var $seekBar = $(this).parent();\n    \n    $seekBar.addClass('no-animate');\n\n    $('.player-bar').bind('mousemove.thumb', function(event){\n      updateSeekPercentage($seekBar, event);\n    });\n \n    //cleanup\n    $('.player-bar').bind('mouseup.thumb', function(){\n      $seekBar.removeClass('no-animate');\n\n      $('.player-bar').unbind('mousemove.thumb');\n      $('.player-bar').unbind('mouseup.thumb');\n    });\n \n  });\n};\n\n","// require(\"./landing\");\n// require(\"./collection\");\n// require(\"./album\");\n// require(\"./profile\");\n\nvar albumPicasso = {\n  name: 'The Colors',\n  artist: 'Pablo Picasso',\n  label: 'Cubism',\n  year: '1881',\n  albumArtUrl: '/images/album-placeholder.png',\n  songs: [\n         { name: 'Blue', length: '4:26', audioUrl: '/music/placeholders/blue' },\n         { name: 'Green', length: '3:14', audioUrl: '/music/placeholders/green' },\n         { name: 'Red', length: '5:01', audioUrl: '/music/placeholders/red' },\n         { name: 'Pink', length: '3:21', audioUrl: '/music/placeholders/pink' },\n         { name: 'Magenta', length: '2:15', audioUrl: '/music/placeholders/magenta' }\n    ]\n};\n\nblocJams = angular.module('BlocJams', ['ui.router']);\nblocJams.config(['$stateProvider', '$locationProvider', function($stateProvider, $locationProvider) {\n  // this just means we want our states to match plain routes (read single page arch checkpoint) and not have routes prefixed with /#!/\n  $locationProvider.html5Mode(true);\n\n  $stateProvider.state('landing', {\n    url: '/',\n    controller: 'Landing.controller',\n    templateUrl: '/templates/landing.html'\n  });\n\n  $stateProvider.state('song', {\n    url: '/song',\n    templateUrl: '/templates/song.html'\n  });\n\n  $stateProvider.state('collection', {\n    url: '/collection',\n    controller: 'Collection.controller',\n    templateUrl: '/templates/collection.html'\n  });\n\n  $stateProvider.state('album', {\n    url: '/album',\n    controller: 'Album.controller',\n    templateUrl: '/templates/album.html'\n  });\n}]);\n\nblocJams.controller('Landing.controller', ['$scope', function($scope) {\n  $scope.title = \"Bloc Jams\";\n  $scope.subText = \"Turn the music up!\";\n\n  function shuffle(o){ //v1.0\n    for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);\n    return o;\n  };\n\n  $scope.subTextClicked = function(event) {\n    $scope.subText += '!';\n  };\n\n  $scope.titleClicked = function(event) {\n    $scope.albumURLs = shuffle(albumURLs);\n  };\n\n  var albumURLs = [\n    '/images/album-placeholders/album-1.jpg',\n    '/images/album-placeholders/album-2.jpg',\n    '/images/album-placeholders/album-3.jpg',\n    '/images/album-placeholders/album-4.jpg',\n    '/images/album-placeholders/album-5.jpg',\n    '/images/album-placeholders/album-6.jpg',\n    '/images/album-placeholders/album-7.jpg',\n    '/images/album-placeholders/album-8.jpg',\n    '/images/album-placeholders/album-9.jpg',\n  ];\n\n  $scope.albumURLs = albumURLs;\n}]);\n\nblocJams.controller('Collection.controller', ['$scope', 'SongPlayer', function($scope, SongPlayer) {\n  $scope.albums = [];\n  for (var i = 0; i < 33; i++) {\n    $scope.albums.push(angular.copy(albumPicasso));\n  }\n\n  $scope.playAlbum = function(album) {\n    SongPlayer.setSong(album, album.songs[0]); // targets first song in array of songs.\n  }\n}]);\n\nblocJams.controller('Album.controller', ['$scope', 'SongPlayer', function($scope, SongPlayer) {\n  $scope.album = angular.copy(albumPicasso);\n\n  var hoveredSong = null;\n\n  $scope.onHoverSong = function(song) {\n    hoveredSong = song;\n  };\n\n  $scope.offHoverSong = function(song) {\n    hoveredSong = null;\n  };\n\n  $scope.getSongState = function(song) {\n    if ( song === SongPlayer.currentSong && SongPlayer.playing ) {\n      return 'playing';\n    }\n    if ( song === hoveredSong ) {\n      return 'hovered';\n    }\n    return 'default';\n  };\n\n  $scope.playSong = function(song) {\n    SongPlayer.setSong($scope.album, song);\n  };\n\n  $scope.pauseSong = function(song) {\n    SongPlayer.pause();\n  };\n}]);\n\n// this gives the player bar controller access to the SongPlayer object (service) \n// by including it in the controller definition\nblocJams.controller('PlayerBar.controller', ['$scope', 'SongPlayer', function($scope, SongPlayer) {\n  $scope.songPlayer = SongPlayer;\n}]);\n\nblocJams.service('SongPlayer', function() {\n  var currentSoundFile = null;\n  var trackIndex = function(album, song) {\n    return album.songs.indexOf(song);\n  }\n\n  return {\n    currentSong: null,\n    currentAlbum: null,\n    playing: false,\n\n    play: function() {\n      this.playing = true;\n      currentSoundFile.play();\n    },\n    pause: function() {\n      this.playing = false;\n      currentSoundFile.pause();\n    },\n    setSong: function(album, song) {\n      if(currentSoundFile) {\n        currentSoundFile.stop();\n      }\n      this.currentSong = song;\n      this.currentAlbum = album;\n      currentSoundFile = new buzz.sound(song.audioUrl, {\n        formats: [\"mp3\"],\n        preload: true\n      });\n\n      this.play();\n    },\n    next: function() {\n      var currentTrackIndex = trackIndex(this.currentAlbum, this.currentSong);\n      currentTrackIndex++;\n      if (currentTrackIndex >= this.currentAlbum.songs.length) {\n        this.currentTrackIndex = 0;\n      }\n      var song = this.currentAlbum.songs[currentTrackIndex];\n      this.setSong(this.currentAlbum, song);\n    },\n    previous: function() {\n      var currentTrackIndex = trackIndex(this.currentAlbum, this.currentSong);\n      currentTrackIndex--;\n      if (currentTrackIndex < 0) {\n        currentTrackIndex = this.currentAlbum.songs.length - 1;\n      }\n      var song = this.currentAlbum.songs[currentTrackIndex];\n      this.setSong(this.currentAlbum, song);\n    }\n  };\n});\n\n// define what you call the directive as the first arg, then pass in the function of what you want it to do\nblocJams.directive('slider', ['$document', function($document) {\n\n  var calculateSliderPercentFromMouseEvent = function($slider, event) {\n    var offsetX = event.pageX - $slider.offset().left;\n    var sliderWidth = $slider.width();\n    var offsetXPercent = (offsetX / sliderWidth);\n    offsetXPercent = Math.max(0, offsetXPercent);\n    offsetXPercent = Math.min(1, offsetXPercent);\n    return offsetXPercent;\n  }\n\n  return {\n    templateUrl: '/templates/directives/slider.html',\n    replace: true,\n    restrict: 'E',\n    scope: {},\n    link: function(scope, element, attributes) {\n      scope.value = 0;\n      scope.max = 200;\n      var $seekBar = $(element);\n\n      var percentString = function() {\n        var percent = Number(scope.value) / Number(scope.max) *100;\n        return percent + \"%\";\n      }\n\n      scope.fillStyle = function() {\n        return {width: percentString()};\n      }\n\n      scope.thumbStyle = function() {\n        return {left: percentString()};\n      } \n\n      scope.onClickSlider = function(event) {\n        var percent = calculateSliderPercentFromMouseEvent($seekBar, event);\n        scope.value = percent * scope.max;\n      }\n\n      scope.trackThumb = function() {\n        $document.bind('mousemove.thumb', function(event){\n          var percent = calculateSliderPercentFromMouseEvent($seekBar, event);\n          scope.$apply(function(){\n            scope.value = percent * scope.max;\n          });\n        });\n\n        // cleanup\n        $document.bind('mouseup.thumb', function() {\n          $document.unbind('mousemove.thumb');\n          $document.unbind('mouseup.thumb');\n        });\n      };\n    }\n  }\n}])\n","var buildAlbumThumbnail = function() {\n   var template =\n       '<div class=\"collection-album-container col-md-2\">'\n     + '  <div class=\"collection-album-image-container\">'\n     + '    <img src=\"/images/album-placeholder.png\"/>'\n     + '  </div>'\n     + '  <div class=\"caption album-collection-info\">'\n     + '    <p>'\n     + '      <a class=\"album-name\" href=\"/album.html\"> Album Name </a>'\n     + '      <br/>'\n     + '      <a href=\"/album.html\"> Artist name </a>'\n     + '      <br/>'\n     + '      X songs'\n     + '      <br/>'\n     + '      X:XX total length'\n     + '      <br/>'\n     + '    </p>'\n     + '  </div>'\n     + '</div>';\n\n  return $(template);\n};\n\nvar buildAlbumOverlay = function(albumURL) {\n  var template = \n      '<div class=\"collection-album-image-overlay\">'\n    + ' <div class=\"collection-overlay-content\">'\n    + '   <a class=\"collection-overlay-button\" href=\"' + albumURL + '\">'\n    + '   <i class=\"fa fa-play\"></i>'\n    + '   </a>'\n    + '   &nbsp;'\n    + '   <a class=\"collection-overlay-button\">'\n    + '     <i class=\"fa fa-plus\"></i>'\n    + '   </a>'\n    + ' </div>'\n    + '</div>'\n    ;\n  return $(template);  \n}\n\nvar updateCollectionView = function() {\n  var $collection = $(\".collection-container .row\");\n  $collection.empty();\n\n  for (var i = 0; i < (Math.random() * 100 + 25); i++) {\n      var $newThumbnail = buildAlbumThumbnail();\n      $collection.append($newThumbnail);\n    }\n\n  var onHover = function(event) {\n    $(this).append(buildAlbumOverlay(\"/album.html\"));\n  };\n\n  var offHover = function(event) {\n    $(this).find('.collection-album-image-overlay').remove();\n  }\n\n  $collection.find('.collection-album-image-container').hover(onHover, offHover);\n};\n\nif (document.URL.match(/\\/collection.html/)) {\n  // wait until the HTML is fully processed.\n  $(document).ready(function() {\n    updateCollectionView();\n  });\n}","// when the page loads document, (document ready), there's a callback that gets the page to run the function that prints hello.\n$(document).ready(function() {\n  console.log(\"hello\");\n});\n\n$(document).ready(function() {\n  // this is a callback for when a click event happens on this element\n  $('.hero-content h3').click(function() {\n    var subText = $(this).text();\n    $(this).text(subText + \"!\");\n  });\n\n  var onHoverAction = function(event) {\n    console.log('Hover action triggered.');\n    $(this).animate({'margin-top': '10px'});\n  }\n  \n  var onHoverOffAction = function(event) {\n    console.log('Hover off engaged');\n    $(this).animate({'margin-top': '0px'});\n  }\n\n  $('.selling-points .point').hover(onHoverAction, onHoverOffAction);\n});","// holds the name of our tab button container for selection later in the function\nvar tabsContainer = \".user-profile-tabs-container\";\n// you would only call this function when a tab button is clicked\nvar selectTabHandler = function(event){\n  $tab = $(this);\n  $(tabsContainer + \" li\").removeClass('active');\n  $tab.parent().addClass('active');\n  selectedTabName = $tab.attr('href');\n  console.log(selectedTabName);\n  $(\".tab-pane\").addClass('hidden');\n  $(selectedTabName).removeClass('hidden');\n  event.preventDefault();\n};\n\nif (document.URL.match(/\\/profile.html/)) {\n  $(document).ready(function() {\n    var $tabs = $(tabsContainer + \" a\");\n    $tabs.click(selectTabHandler);\n    $tabs[0].click();\n  });\n}"]}